#!/bin/sh
# dockerd start script
[ $(id -u) = 0 ] || { echo 'must be root' ; exit 1; }

#import settings from profile (e.g. HTTP_PROXY, HTTPS_PROXY)
test -f '/var/lib/boot2docker/profile' && . '/var/lib/boot2docker/profile'

: ${DOCKER_HOST:='-H tcp://0.0.0.0:2376'}
: ${DOCKER_TLS:=auto}
: ${DOCKER_STORAGE:=auto}
: ${DOCKER_DIR:=/var/lib/docker}
: ${DOCKER_ULIMITS:=1048576}
: ${DOCKER_LOGFILE:=/var/lib/boot2docker/docker.log}

: ${SYSTEM_AUTH_CERT_FILE:="/etc/ssl/certs/ca-certificates.crt"}
: ${CLUSTER_ID_FILE:="/etc/pocket/cluster.id"}

: ${CERTDIR:=/etc/pocket/pki/}
: ${CACERT:="${CERTDIR}pc_core_tls.acr"}
: ${CERT:="${CERTDIR}pc_core_tls.crt"}
: ${KEY:="${CERTDIR}pc_core_tls.pem"} 

# Add /usr/local/sbin to the path.
export PATH=${PATH}:/usr/local/sbin

start() {
    if [ ! -e "/etc/docker" ]; then
        echo "Linking /etc/docker to /var/lib/boot2docker for persistence"
        mkdir -p "/var/lib/boot2docker/etc/docker"
        ln -sf "/var/lib/boot2docker/etc/docker" "/etc/docker"
    fi

    # Enabling Docker daemon TLS by default.
    # Check if TLS certs file exists
    if [ ! -f "$CACERT" ] || [ ! -f "$CERT" ] || [ ! -f "$KEY" ]; then
        echo "Insufficient certificate data"
        return
    fi
    # Check if system auth cert pool exists
    if [ ! -f "$SYSTEM_AUTH_CERT_FILE" ]; then
        echo "Insufficient system auth certificate data"
        return
    fi
    # Check Cluster ID file exists
    if [ ! -f "$CLUSTER_ID_FILE" ]; then
        echo "Insufficient cluster identity"
        return
    fi

    # Update System Auth Cert Pool
    cat ${CACERT} >> ${SYSTEM_AUTH_CERT_FILE}

    # Setup Master Host
    CID=$(cat ${CLUSTER_ID_FILE} 2>/dev/null)
    MASTER_HOST="pc-master.${CID}.cluster.pocketcluster.io"

    # Setup Extra Arguments
    EXTRA_ARGS="--dns 127.0.0.1"
    EXTRA_ARGS="$EXTRA_ARGS --tlsverify --tlscacert=${CACERT} --tlscert=${CERT} --tlskey=${KEY}"
    EXTRA_ARGS="$EXTRA_ARGS --cluster-advertise=eth1:2376"
    EXTRA_ARGS="$EXTRA_ARGS --cluster-store=etcd://${MASTER_HOST}:2379"
    EXTRA_ARGS="$EXTRA_ARGS --cluster-store-opt kv.cacertfile=${CACERT} --cluster-store-opt kv.certfile=${CERT} --cluster-store-opt kv.keyfile=${KEY}"

    mkdir -p "$DOCKER_DIR"

    if [ "$DOCKER_STORAGE" = 'auto' ]; then
        # if /var/lib/docker is on BTRFS, let's use the native btrfs driver
        # (AUFS on top of BTRFS does very bad things)
        DOCKER_DEVICE="$(/bin/df -P "$DOCKER_DIR" | /usr/bin/awk 'END { print $1 }')"
        DOCKER_FSTYPE="$(/sbin/blkid -o export "$DOCKER_DEVICE" | /bin/grep TYPE= | /usr/bin/cut -d= -f2)"
        if [ "$DOCKER_FSTYPE" = 'btrfs' ]; then
            DOCKER_STORAGE="$DOCKER_FSTYPE"
        fi
    fi
    if [ "$DOCKER_STORAGE" != 'auto' ]; then
        # in the general case, let's trust Docker to "do the right thing"
        EXTRA_ARGS="$EXTRA_ARGS -s $DOCKER_STORAGE"
    fi

    # Increasing the number of open files and processes by docker
    ulimit -n $DOCKER_ULIMITS
    ulimit -p $DOCKER_ULIMITS

    echo "------------------------" >> "$DOCKER_LOGFILE"
    echo "/usr/local/bin/dockerd -D -g \"$DOCKER_DIR\" $DOCKER_HOST $EXTRA_ARGS >> \"$DOCKER_LOGFILE\"" >> "$DOCKER_LOGFILE"
    /usr/local/bin/dockerd -D -g "$DOCKER_DIR" $DOCKER_HOST $EXTRA_ARGS >> "$DOCKER_LOGFILE" 2>&1 &
}

stop() {
    PID=$(cat /var/run/docker.pid)
    kill $PID
    while kill -0 $PID &>/dev/null; do
        sleep 0.1
    done
}

restart() {
    if check; then
        stop
        i=30
        while check ; do
            sleep 1
            i=$(expr $i - 1)
            [ "$i" -gt 0 ] || { echo "Failed to stop Docker dameon" ; exit 1 ; }
        done
    fi
    start
}

check() {
    [ -f /var/run/docker.pid ] && ps -A -o pid | grep "^\s*$(cat /var/run/docker.pid)$" > /dev/null 2>&1
}

status() {
    if check; then
        echo 'Docker daemon is running'
        exit 0
    else
        echo 'Docker daemon is not running'
        exit 1
    fi
}

case $1 in
    start) start;;
    stop) stop;;
    restart) restart;;
    status) status;;
    *) echo "Usage $0 {start|stop|restart|status}"; exit 1
esac
